What does Sized mean? Doesn't everything have a static size?

What's "as" mean in the where clause in https://doc.rust-lang.org/std/iter/trait.IntoIterator.html
-> The website displays constraints in a different way. In the code, it's `type IntoIter: Iterator<Item=Self::Item>`.

Why does FromIterator take an IntoIterator, not an Iterator directly?
https://doc.rust-lang.org/std/iter/trait.FromIterator.html
-> It's more general this way, since Iterator implements IntoIterator.

Can you call into_iter() multiple times? I don't think so, since self isn't a reference.
-> You can't, unless the type is Copy (all references are).

What does From::from() do here https://doc.rust-lang.org/src/alloc/vec.rs.html#2226-2230

Project idea: implement a linked-list.

Try making a struct with a reference field, then make a method that takes a reference and puts it into a struct instance.

Why does hashmap[key] want key to be a reference?
-> Because hashmap[key] is only for reading, you have to call a method to insert.

How does moving_method.rs work when Vec doesn't implement Copy, only Clone? Is it because all references implement Copy?
-> all refs implement Copy/Clone, as show in refs_copyable.rs.

Why does Box's contained type need to be 'static?

When self is a &mut, why doesn't *self.b or *self.b.deref_mut() work when b is a Box<T>? self.b.as_mut() does work.

Why can't we immutably borrow an object as part of constructing an argument for a mutable method on that object?

What is the difference between `where` clauses and generic parameters?

How do you return a struct that encapsulates a borrowed argument?
Does f<'a>(&'a arg) -> MyStruct<'a> work?
Is this normally inferred?

How do Futures take ownership of your function argument to map()?
Does this only work if your FnOnce doesn't use any local variables?
Or, does it work as long as your Map<>'s lifetime is <= the lifetime of the most short-lived captured var?
(https://docs.rs/futures/0.1.18/src/futures/future/map.rs.html#22-38)

What happens if we try to put a Map<> into a Box<Future>?
Does that make it 'static, and thus prevent our function from making any refs?

Why do we have to explicitly state a lifetime for a struct if it has a reference field,
but we don't have to if it's generic over any type (which might _be_ a reference)?
